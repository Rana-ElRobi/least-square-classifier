for (curr in (1:128)){  # Loop on the paths list
curr.img = readJPEG(paths[[curr]], native = FALSE)
# sort pixels in one list of features
# Now ---------- lets read all pixels in on list of 144 feature
curr_char = list();
count = 1   # counter of features list
for (x in 1:12){    # loop on x axis
for (y in 1:12){  # loop on y axis
curr_char[count] = curr.img[x,y] # append pixel value in list of features
count = count + 1 # incremant index of list
}
}
images.list[[img.count]] = curr_char
img.count = img.count + 1
}
source('~/Desktop/fisher-linear-classiffier/fisherLinearClassifier.R', echo=TRUE)
len(characters
)
dim(characters)
size(characters)
source('~/Desktop/fisher-linear-classiffier/fisherLinearClassifier.R', echo=TRUE)
source('~/Desktop/fisher-linear-classiffier/fisherLinearClassifier.R', echo=TRUE)
View(images.matrix)
View(images.matrix)
source('~/Desktop/fisher-linear-classiffier/fisherLinearClassifier.R', echo=TRUE)
dim (images.matrix)
source('~/Desktop/fisher-linear-classiffier/fisherLinearClassifier.R', echo=TRUE)
dim (images.matrix)
break
dim (images.matrix)
images.matrix = matrix()
dim(images.matrix)
x= [2,3,4,5]
x= list(2,3,4,5)
y = rbind (images.matrix,x)
source('~/Desktop/fisher-linear-classiffier/fisherLinearClassifier.R', echo=TRUE)
dim (images.matrix)
source('~/Desktop/fisher-linear-classiffier/fisherLinearClassifier.R', echo=TRUE)
images.matrix = images.matrix[2:183,1:145]
source('~/Desktop/fisher-linear-classiffier/fisherLinearClassifier.R', echo=TRUE)
x.par = images.matrix[2:183,1:145]
x.parTranspose = t(x.par)
dim(x.parTranspose)
dim(x.par)
library("MASS", lib.loc="/usr/lib/R/library")
install.packages("MASS")
x.parTranspose = t(x.par) # get transpose
x.par.Multiply = x.par %*% x.parTranspose
x.par.Mult.invers = ginv(x.par.Multiply)
library("MASS", lib.loc="/usr/lib/R/library")
x.parTranspose = t(x.par) # get transpose
x.par.Multiply = x.par %*% x.parTranspose
x.par.Multiply = x.par %*% x.parTranspose
x.par.Mult.invers = ginv(x.par.Multiply)
x.par.Multiply = x.par * x.parTranspose
x.par.Multiply = x.par %*% x.parTranspose
dim (x.par)
dim(x.parTranspose)
v = x.par %*% x.parTranspose
v = x.parTranspose %*% x.par
typeof(x.par)
x.par = as.matrix(images.matrix[2:183,1:145])# now we have x.par
typeof(x.par)
x.parTranspose = t(x.par) # get transpose
x.par.Multiply = x.par %*% x.parTranspose
v1 = as.vector(matrix(1,7,1)) # for a class
v2 = as.vector(matrix(-1,175,1)) # for NOT a class
target.a = rbind(v1,v2)
View(target.a)
v1 = matrix(1,7,1) # for a class
v2 = matrix(-1,175,1) # for NOT a class
target.a = rbind(v1,v2)
View(target.a)
class.vector = matrix(1,7,1) # for a class
target.vector = matrix(-1,182,1) # for ALL classes
for (i in (1:7)){
# overwrite
target.vector[i] = class.vector[i]
}
View(target.vector)
